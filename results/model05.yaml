class_name: Model
config:
  input_layers:
  - [the_input, 0, 0]
  - [the_labels, 0, 0]
  - [input_length, 0, 0]
  - [label_length, 0, 0]
  layers:
  - class_name: InputLayer
    config:
      batch_input_shape: !!python/tuple [null, 128, 64, 1]
      input_dtype: float32
      name: the_input
      sparse: false
    inbound_nodes: []
    name: the_input
  - class_name: Convolution2D
    config:
      W_constraint: null
      W_regularizer: null
      activation: relu
      activity_regularizer: null
      b_constraint: null
      b_regularizer: null
      bias: true
      border_mode: same
      dim_ordering: tf
      init: he_normal
      name: conv1
      nb_col: 3
      nb_filter: 16
      nb_row: 3
      subsample: &id002 !!python/tuple [1, 1]
      trainable: true
    inbound_nodes:
    - - [the_input, 0, 0]
    name: conv1
  - class_name: MaxPooling2D
    config:
      border_mode: valid
      dim_ordering: tf
      name: max1
      pool_size: &id001 !!python/tuple [2, 2]
      strides: *id001
      trainable: true
    inbound_nodes:
    - - [conv1, 0, 0]
    name: max1
  - class_name: Convolution2D
    config:
      W_constraint: null
      W_regularizer: null
      activation: relu
      activity_regularizer: null
      b_constraint: null
      b_regularizer: null
      bias: true
      border_mode: same
      dim_ordering: tf
      init: he_normal
      name: conv2
      nb_col: 3
      nb_filter: 16
      nb_row: 3
      subsample: *id002
      trainable: true
    inbound_nodes:
    - - [max1, 0, 0]
    name: conv2
  - class_name: MaxPooling2D
    config:
      border_mode: valid
      dim_ordering: tf
      name: max2
      pool_size: &id003 !!python/tuple [2, 2]
      strides: *id003
      trainable: true
    inbound_nodes:
    - - [conv2, 0, 0]
    name: max2
  - class_name: Reshape
    config:
      name: reshape
      target_shape: !!python/tuple [32, 256]
      trainable: true
    inbound_nodes:
    - - [max2, 0, 0]
    name: reshape
  - class_name: Dense
    config: {W_constraint: null, W_regularizer: null, activation: relu, activity_regularizer: null,
      b_constraint: null, b_regularizer: null, bias: true, init: glorot_uniform, input_dim: 256,
      name: dense1, output_dim: 32, trainable: true}
    inbound_nodes:
    - - [reshape, 0, 0]
    name: dense1
  - class_name: GRU
    config: {U_regularizer: null, W_regularizer: null, activation: tanh, b_regularizer: null,
      consume_less: cpu, dropout_U: 0.0, dropout_W: 0.0, go_backwards: false, init: he_normal,
      inner_activation: hard_sigmoid, inner_init: orthogonal, input_dim: 32, input_length: null,
      name: gru1, output_dim: 512, return_sequences: true, stateful: false, trainable: true,
      unroll: false}
    inbound_nodes:
    - - [dense1, 0, 0]
    name: gru1
  - class_name: GRU
    config: {U_regularizer: null, W_regularizer: null, activation: tanh, b_regularizer: null,
      consume_less: cpu, dropout_U: 0.0, dropout_W: 0.0, go_backwards: true, init: he_normal,
      inner_activation: hard_sigmoid, inner_init: orthogonal, input_dim: 32, input_length: null,
      name: gru1_b, output_dim: 512, return_sequences: true, stateful: false, trainable: true,
      unroll: false}
    inbound_nodes:
    - - [dense1, 0, 0]
    name: gru1_b
  - class_name: Merge
    config:
      arguments: {}
      concat_axis: -1
      dot_axes: -1
      mode: sum
      mode_type: raw
      name: merge_1
      output_mask: null
      output_mask_type: raw
      output_shape: null
      output_shape_type: raw
    inbound_nodes:
    - - [gru1, 0, 0]
      - [gru1_b, 0, 0]
    name: merge_1
  - class_name: GRU
    config: {U_regularizer: null, W_regularizer: null, activation: tanh, b_regularizer: null,
      consume_less: cpu, dropout_U: 0.0, dropout_W: 0.0, go_backwards: false, init: he_normal,
      inner_activation: hard_sigmoid, inner_init: orthogonal, input_dim: 512, input_length: null,
      name: gru2, output_dim: 512, return_sequences: true, stateful: false, trainable: true,
      unroll: false}
    inbound_nodes:
    - - [merge_1, 0, 0]
    name: gru2
  - class_name: GRU
    config: {U_regularizer: null, W_regularizer: null, activation: tanh, b_regularizer: null,
      consume_less: cpu, dropout_U: 0.0, dropout_W: 0.0, go_backwards: true, init: he_normal,
      inner_activation: hard_sigmoid, inner_init: orthogonal, input_dim: 512, input_length: null,
      name: gru2_b, output_dim: 512, return_sequences: true, stateful: false, trainable: true,
      unroll: false}
    inbound_nodes:
    - - [merge_1, 0, 0]
    name: gru2_b
  - class_name: Merge
    config:
      arguments: {}
      concat_axis: -1
      dot_axes: -1
      mode: concat
      mode_type: raw
      name: merge_2
      output_mask: null
      output_mask_type: raw
      output_shape: null
      output_shape_type: raw
    inbound_nodes:
    - - [gru2, 0, 0]
      - [gru2_b, 0, 0]
    name: merge_2
  - class_name: Dense
    config: {W_constraint: null, W_regularizer: null, activation: linear, activity_regularizer: null,
      b_constraint: null, b_regularizer: null, bias: true, init: he_normal, input_dim: 1024,
      name: dense2, output_dim: 34, trainable: true}
    inbound_nodes:
    - - [merge_2, 0, 0]
    name: dense2
  - class_name: Activation
    config: {activation: softmax, name: softmax, trainable: true}
    inbound_nodes:
    - - [dense2, 0, 0]
    name: softmax
  - class_name: InputLayer
    config:
      batch_input_shape: !!python/tuple [null, 16]
      input_dtype: float32
      name: the_labels
      sparse: false
    inbound_nodes: []
    name: the_labels
  - class_name: InputLayer
    config:
      batch_input_shape: !!python/tuple [null, 1]
      input_dtype: int64
      name: input_length
      sparse: false
    inbound_nodes: []
    name: input_length
  - class_name: InputLayer
    config:
      batch_input_shape: !!python/tuple [null, 1]
      input_dtype: int64
      name: label_length
      sparse: false
    inbound_nodes: []
    name: label_length
  - class_name: Lambda
    config:
      arguments: {}
      function: !!python/tuple ["c\x01\0\0\0\x05\0\0\0\x05\0\0\0C\0\0\0sM\0\0\0|\0\
          \0\\\x04\0}\x01\0}\x02\0}\x03\0}\x04\0|\x01\0d\0\0d\0\0\N\x02\0d\x01\0d\0\
          \0\N\x02\0d\0\0d\0\0\N\x02\0f\x03\0\x19}\x01\0t\0\0j\x01\0|\x02\0|\x01\0\
          |\x03\0|\x04\0\x83\x04\0S(\x02\0\0\0Ni\x02\0\0\0(\x02\0\0\0t\x01\0\0\0Kt\x0E\
          \0\0\0ctc_batch_cost(\x05\0\0\0t\x04\0\0\0argst\x06\0\0\0y_predt\x06\0\0\
          \0labelst\f\0\0\0input_lengtht\f\0\0\0label_length(\0\0\0\0(\0\0\0\0s\x0E\
          \0\0\0src/trainer.pyt\x0F\0\0\0ctc_lambda_funcn\x01\0\0s\x06\0\0\0\0\x01\
          \x12\x03%\x01", null, null]
      function_type: lambda
      name: ctc
      output_shape: !!python/tuple [1]
      output_shape_type: raw
      trainable: true
    inbound_nodes:
    - - [softmax, 0, 0]
      - [the_labels, 0, 0]
      - [input_length, 0, 0]
      - [label_length, 0, 0]
    name: ctc
  name: model_2
  output_layers:
  - [ctc, 0, 0]
keras_version: 1.2.2
